filetype plugin indent on
" for case insensitive searching. Use /\C<search term> for sensitive search
set ignorecase
set tabstop=4
set shiftwidth=4
set expandtab
"set relativenumber

" Disable swp file creatoin in working directory
" The double trailing slashes activate a feature which avoids name collisions
set backupdir=~/.vim/backup//
set directory=~/.vim/swap//
set undodir=~/.vim/undo//

colorscheme birds-of-paradise "wasabi256 blackboard  

" Map Esc from insert mode to 'jk'
" inoremap jk <Esc>
inoremap kj <Esc>

" Map 'Enter' to inserting newlines
nmap <CR> o<Esc>

" Change basic cursor controls
" v l  ^ k  < l  > รถ
"nnoremap l h
"nnoremap รถ l
"vnoremap l h
"vnoremap รถ l
" For US keyboard this is bad. use the following instead
nnoremap l h
nnoremap ; l
vnoremap l h
vnoremap ; l


" Show linenumbers and allow double-press of CTRL-N to toggle them
set number
nmap <C-N><C-N> :set nu!<CR>
nmap <C-B><C-B> :set relativenumber!<CR>


" CTRL-c to comment CTRL-x to uncomment with #
nnoremap <C-c> :s/^\s*[^#]/#&/g<CR>:noh<CR>
nnoremap <C-x> :s/^#//g<CR>:noh<CR>
vnoremap <C-c> :s/^[^#]/#&/g<CR>:noh<CR>
vnoremap <C-x> :s/^#//g<CR>:noh<CR>
inoremap <C-c> <Esc>:s/^[^#]/#&/g<CR>:noh<CR>i
inoremap <C-x> <Esc>:s/^#//g<CR>:noh<CR>i

" Refresh syntax highlighting
noremap <F12> <Esc>:syntax sync fromstart<CR>

" Function to fill with a string up to linenumber
" Fill(str='-', n=80)
function Fill(...)
    if a:0 == 0
        let str = "-"
        let n = 80
    else
        if a:0 == 1
            let str = a:1
            let n = 80
        else
            let str = a:1
            let n = a:2
        end
    end
    execute "normal! " . n ."A" . str
    execute "normal! " . "d" . n . "|"
endfunction
nnoremap <C-F> :call Fill("

" Underline the current line
function U(...)
    if a:0 == 0
        let s = "-"
    else
        let s = a:1
    end
    let c = virtcol( [ line("."), "$" ] ) - 1
    execute "normal! o# "
    call Fill(c, s)
endfunction

" Function to reformat a block of text such that its max width is 80
" Also try to stay commented if the line starts with #, or //
function Break(...)
    " Parse options
    if a:0 == 0
        let c = 80
    else
        let c = a:1
    end
    " Check if we're one iteration level deeper
    if a:0 > 1
        let iter = a:2
    else
        let iter = 0
    end

    " Get length of this line, break it if it's over 80
    let column = col('$') - 1
    if column > c
        " Now check if we're in a comment block
        " Save the first 'word' in register k
        " Need two slightly different commands depending on whether or not
        " there are whitespaces at the beginning of the line
        let first = getline(".")[0]
        if first == " "
            execute "normal! 0wvwh\"ky"
        else
            execute "normal! 0vwh\"ky"
        endif
        
        " Split off unnecessary whitespaces at the end of k
        let k = split(@k)[0]
        if k != "//" && k != "#"
            let @k = ""
        endif
        " The actual action
        execute "normal! ".c."|Bi\<CR>\<Esc>"
        let first = getline(".")[0]
        " If we are indented the automatic indentation messes up our position
    " thus we need to move the cursor.
    if first == " "
        execute "normal! 0w"
    endif
    " Paste the comment character
    execute "normal! \"kP"
else
    if iter == 0
        execute "normal! J"
        call Break(c, 1)
    else
        echo "Line not longer than " . c
    end
endif
endfunction

nnoremap <C-P> :call Break()<CR>

" Function and corresponding user command to create latex begin and end block
function! LatexBlock(name)
    execute "normal! i\\begin{" . a:name . "}\<CR>\<CR>\\end{" . a:name . 
                \ "}\<Esc>k"
endfunction

com -nargs=1 LB call LatexBlock(<f-args>)
